[{"C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\index.js":"1","C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\reportWebVitals.js":"2","C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\App.js":"3","C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\contexts\\DashboardProvider.js":"4","C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\routes\\routes.js":"5","C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\layout\\Main.jsx":"6","C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\components\\NavBar.jsx":"7","C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\pages\\Dashboard.jsx":"8"},{"size":668,"mtime":1716851400154,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1716851400157,"results":"11","hashOfConfig":"10"},{"size":258,"mtime":1716851400151,"results":"12","hashOfConfig":"10"},{"size":736446,"mtime":1716903077524,"results":"13","hashOfConfig":"10"},{"size":208,"mtime":1716851400158,"results":"14","hashOfConfig":"10"},{"size":266,"mtime":1716851947853,"results":"15","hashOfConfig":"10"},{"size":1418,"mtime":1716851400153,"results":"16","hashOfConfig":"10"},{"size":13620,"mtime":1716851400157,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"9wos7n",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"21"},"C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\index.js",[],[],[],"C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\App.js",[],[],"C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\contexts\\DashboardProvider.js",["44"],[],"C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\routes\\routes.js",[],[],"C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\layout\\Main.jsx",[],[],"C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\components\\NavBar.jsx",[],[],"C:\\Users\\91983\\OneDrive\\Desktop\\New folder\\Visualization-dashboard-app\\src\\pages\\Dashboard.jsx",["45","46","47"],[],"import React, { useContext, useEffect, useRef, useState, } from 'react';\r\nimport { DashboardContext } from '../contexts/DashboardProvider';\r\nimport { Bar, Chart, Line, Scatter } from 'react-chartjs-2';\r\n\r\nimport {\r\n    Chart as ChartJs,\r\n    BarElement,\r\n    CategoryScale,\r\n    LinearScale,\r\n    Tooltip,\r\n    Legend,\r\n    PointElement,\r\n    LineElement\r\n} from 'chart.js';\r\n\r\n\r\n\r\nChartJs.register(\r\n    BarElement,\r\n    CategoryScale,\r\n    LinearScale, //y\r\n    Tooltip,\r\n    Legend,\r\n    PointElement,\r\n    LinearScale,\r\n    LineElement\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Dashboard = () => {\r\n\r\n    const { rawdata, loading } = useContext(DashboardContext);\r\n    // const [EndYear, setEndYear] = useState(null);\r\n\r\n    const [selectedEndYear, setSelectedEndYear] = useState(null);\r\n    const [endYearFilterData, setEndyearFilterData] = useState([]);\r\n\r\n    const [selectedTopic, setSelectedTopic] = useState('');\r\n    const [topicsFilterData, settopicsFilterData] = useState([]);\r\n\r\n    const [selectedsector, setSelectedsector] = useState('');\r\n    const [sectorsFilterData, setsectorsFilterData] = useState([]);\r\n\r\n    const [selectedcountry, setSelectedcountry] = useState('');\r\n    const [countrysFilterData, setcountrysFilterData] = useState([]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    let country = rawdata.map(p => p.country);\r\n    let countrys = rawdata.map(p => p.country);\r\n    const Intensity = rawdata.map(p => p.intensity)\r\n    const Likelihood = rawdata.map(p => p.likelihood)\r\n    const Relevance = rawdata.map(p => p.relevance)\r\n    const StartYear = rawdata.map(p => p.start_year)\r\n    let EndYear = rawdata.map(p => p.end_year)\r\n    let EndYears = rawdata.map(p => p.end_year)\r\n    let Topics = rawdata.map(p => p.topic)\r\n    let Sector = rawdata.map(p => p.sector)\r\n    let Sectors = rawdata.map(p => p.sector)\r\n    let Topicss = rawdata.map(p => p.topic)\r\n\r\n    const scatterData = Intensity.map((value, index) => ({ x: value, y: Likelihood[index] }));\r\n\r\n\r\n\r\n    console.log('asdfadfasdf', selectedEndYear)\r\n\r\n    const handleEndYearFilter = () => {\r\n        let filteredEndYear = rawdata.filter(z => z.end_year === parseInt(selectedEndYear)).map(p => p.end_year)\r\n        console.log('clicked', selectedEndYear, filteredEndYear)\r\n        setEndyearFilterData(filteredEndYear)\r\n    }\r\n\r\n    const handleTopicsFilter = () => {\r\n        let filteredTopics = rawdata.filter(z => z.topic === selectedTopic).map(p => p.topic)\r\n        console.log('clicked', selectedEndYear, filteredTopics)\r\n        settopicsFilterData(filteredTopics)\r\n    }\r\n\r\n    const handleSectorsFilter = () => {\r\n        let filteredsector = rawdata.filter(z => z.sector === selectedsector).map(p => p.sector)\r\n        console.log('clicked', selectedEndYear, filteredsector)\r\n        setsectorsFilterData(filteredsector)\r\n    }\r\n\r\n    const handleCountryFilter = () => {\r\n        let filteredcountry = rawdata.filter(z => z.country === selectedcountry).map(p => p.country)\r\n        console.log('clicked', selectedEndYear, filteredcountry)\r\n        setcountrysFilterData(filteredcountry)\r\n    }\r\n\r\n    EndYear = endYearFilterData;\r\n    Topics = topicsFilterData;\r\n    Sector = sectorsFilterData;\r\n    country = countrysFilterData;\r\n\r\n    console.log(EndYear)\r\n\r\n\r\n\r\n    console.log(scatterData);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // console.log('Loading...', loading);\r\n\r\n    //Intensity / country\r\n    const intensityData = {\r\n        labels: Topics,\r\n        datasets: [\r\n            {\r\n                label: 'Intensity',\r\n                data: Intensity,\r\n                backgroundColor: 'green',\r\n                borderColor: 'green',\r\n                borderWidth: 0,\r\n            },\r\n            {\r\n                label: 'Relevance',\r\n                data: Relevance,\r\n                backgroundColor: 'red',\r\n                borderColor: 'red',\r\n                borderWidth: 0,\r\n            },\r\n            {\r\n                label: 'LikeHood',\r\n                data: Relevance,\r\n                backgroundColor: 'blue',\r\n                borderColor: 'blue',\r\n                borderWidth: 0,\r\n            }\r\n        ]\r\n    }\r\n\r\n\r\n    const intensityData2 = {\r\n        labels: Sector,\r\n        datasets: [\r\n            {\r\n                label: 'Intensity',\r\n                data: Intensity,\r\n                backgroundColor: 'purple',\r\n                borderColor: 'purple',\r\n                borderWidth: 0,\r\n            },\r\n        ]\r\n    }\r\n\r\n    const intensityOptions = {\r\n\r\n    }\r\n\r\n\r\n\r\n    //Relationship between intensity and likelihood\r\n    const relData = {\r\n        datasets: [\r\n            {\r\n                label: 'Intensity , LikeHood',\r\n                data: scatterData,\r\n                backgroundColor: 'blue',\r\n            },\r\n        ],\r\n    }\r\n\r\n    const relOptions = {\r\n\r\n    }\r\n\r\n    //\r\n    const labels = country;\r\n\r\n    const lineData = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: 'Intensity',\r\n                data: Intensity,\r\n                borderColor: 'red',\r\n                backgroundColor: 'red',\r\n                borderWidth: 1,\r\n            },\r\n            {\r\n                label: 'Relevance',\r\n                data: Relevance,\r\n                borderColor: 'rgb(53, 162, 235)',\r\n                backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n            },\r\n            {\r\n                label: 'LikeHood',\r\n                data: Likelihood,\r\n                borderColor: 'green',\r\n                backgroundColor: 'green',\r\n            },\r\n            {\r\n                label: 'Start Year',\r\n                data: StartYear,\r\n                borderColor: 'pink',\r\n                backgroundColor: 'pink',\r\n            },\r\n            {\r\n                label: 'End Year',\r\n                data: EndYear,\r\n                borderColor: 'yellow',\r\n                backgroundColor: 'yellow',\r\n            },\r\n        ],\r\n    };\r\n    const lineOptions = {\r\n        plugins: {\r\n            legend: {\r\n                position: 'top'\r\n            },\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"drawer drawer-mobile\">\r\n                <input id=\"my-drawer-2\" type=\"checkbox\" className=\"drawer-toggle\" />\r\n                <div className=\"drawer-content\">\r\n                    {/* <!-- Page content here --> */}\r\n                    {/* <Outlet></Outlet> */}\r\n                    {\r\n                        loading ?\r\n\r\n                            <div className='flex flex-col items-center justify-center mt-[20%]'>\r\n                                <div className=\"radial-progress animate-spin\" style={{ \"--value\": 20 }}></div>\r\n                                <p>Please wait</p>\r\n                            </div>\r\n\r\n                            :\r\n                            <div className='mx-10 my-10 space-y-10'>\r\n                                <div>\r\n                                    <div className=\"bg-base-100\">\r\n                                        <h className=\" font-bold normal-case text-xl\">Intensity , Relevance and LikeHood with country</h>\r\n                                    </div>\r\n                                    <Line\r\n                                        data={lineData}\r\n                                        options={lineOptions}\r\n                                    ></Line>\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <div className=\"bg-base-100\">\r\n                                        <h className=\" font-bold normal-case text-xl\">Relationship between intensity and likelihood</h>\r\n                                    </div>\r\n                                    <Scatter\r\n                                        data={relData}\r\n                                        options={relOptions}\r\n                                    ></Scatter>\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <div className=\"bg-base-100\">\r\n                                        <h className=\" font-bold normal-case text-xl\">Topics with Relevance and LikeHood</h>\r\n                                    </div>\r\n                                    <Bar\r\n                                        data={intensityData}\r\n                                        options={intensityOptions}\r\n                                    ></Bar>\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <div className=\"bg-base-100\">\r\n                                        <h className=\" font-bold normal-case text-xl\">Sector with Intensity</h>\r\n                                    </div>\r\n                                    <Bar\r\n                                        data={intensityData2}\r\n                                        options={intensityOptions}\r\n                                    ></Bar>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"drawer-side\">\r\n                    <label htmlFor=\"my-drawer-2\" className=\"drawer-overlay\"></label>\r\n                    <ul className=\"menu p-4 w-40 border bg-base-300 text-base-content\">\r\n                        {/* <!-- Sidebar content here --> */}\r\n                        <p className='font-semibold text-xl'>Filter</p>\r\n                        <div className='border'>\r\n                            <p className='mt-5 text-xs font-semibold'>Region</p>\r\n                            <select className='select select-bordered select-sm w-full max-w-xs' value={selectedEndYear} onClick={handleCountryFilter} onChange={(e) => {\r\n                                setSelectedcountry(e.target.value)\r\n\r\n                            }}>\r\n                                <option className='' value=''>Select Region</option>\r\n                                {countrys.map((region) => (\r\n                                    <option key={region} value={region}>\r\n                                        {\r\n                                            typeof (region) === 'string' ?\r\n                                                region : null\r\n                                        }\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                        <div className='border'>\r\n                            <p className='mt-5 text-xs font-semibold'>End Year</p>\r\n                            <select className='select select-bordered select-sm w-full max-w-xs' value={selectedEndYear} onClick={handleEndYearFilter} onChange={(e) => {\r\n                                setSelectedEndYear(e.target.value)\r\n\r\n                            }}>\r\n                                <option className='' value=''>Select year</option>\r\n                                {EndYears.map((year) => (\r\n                                    <option key={year} value={year}>\r\n                                        {\r\n                                            typeof (year) === 'number' ?\r\n                                                year : null\r\n                                        }\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className='border'>\r\n                            <p className='mt-5 text-xs font-semibold'>Topics</p>\r\n                            <select className='select select-bordered select-sm w-full max-w-xs' value={selectedEndYear} onClick={handleTopicsFilter} onChange={(e) => {\r\n                                setSelectedTopic(e.target.value)\r\n\r\n                            }}>\r\n                                <option className='' value=''>Select topics</option>\r\n                                {Topicss.map((topic) => (\r\n                                    <option key={topic} value={topic}>\r\n                                        {\r\n                                            typeof (topic) === 'string' ?\r\n                                                topic : null\r\n                                        }\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        {/* Sector */}\r\n                        <div className='border'>\r\n                            <p className='mt-5 text-xs font-semibold'>Sector</p>\r\n                            <select className='select select-bordered select-sm w-full max-w-xs' value={selectedEndYear} onClick={handleSectorsFilter} onChange={(e) => {\r\n                                setSelectedsector(e.target.value)\r\n\r\n                            }}>\r\n                                <option className='' value=''>Select Sector</option>\r\n                                {Sectors.map((topic) => (\r\n                                    <option key={topic} value={topic}>\r\n                                        {\r\n                                            typeof (topic) === 'string' ?\r\n                                                topic : null\r\n                                        }\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        {/* region */}\r\n\r\n\r\n                    </ul>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;",{"ruleId":"48","severity":1,"message":"49","line":20119,"column":4,"nodeType":"50","endLine":20119,"endColumn":6,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":29,"nodeType":"54","messageId":"55","endLine":1,"endColumn":38},{"ruleId":"52","severity":1,"message":"56","line":1,"column":40,"nodeType":"54","messageId":"55","endLine":1,"endColumn":46},{"ruleId":"52","severity":1,"message":"57","line":3,"column":15,"nodeType":"54","messageId":"55","endLine":3,"endColumn":20},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'rawdata'. Either include it or remove the dependency array.","ArrayExpression",["58"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'Chart' is defined but never used.",{"desc":"59","fix":"60"},"Update the dependencies array to be: [rawdata]",{"range":"61","text":"62"},[736151,736153],"[rawdata]"]